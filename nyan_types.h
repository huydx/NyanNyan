/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nyan_TYPES_H
#define nyan_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace nyan {

typedef int32_t MyInteger;

class SyncPacket;

typedef struct _SyncPacket__isset {
  _SyncPacket__isset() : server(true), frame(true) {}
  bool server :1;
  bool frame :1;
} _SyncPacket__isset;

class SyncPacket {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  SyncPacket(const SyncPacket&);
  SyncPacket& operator=(const SyncPacket&);
  SyncPacket() : server(0), frame(0) {
  }

  virtual ~SyncPacket() throw();
  int32_t server;
  int32_t frame;

  _SyncPacket__isset __isset;

  void __set_server(const int32_t val);

  void __set_frame(const int32_t val);

  bool operator == (const SyncPacket & rhs) const
  {
    if (!(server == rhs.server))
      return false;
    if (!(frame == rhs.frame))
      return false;
    return true;
  }
  bool operator != (const SyncPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SyncPacket& obj);

};

void swap(SyncPacket &a, SyncPacket &b);

} // namespace

#endif
